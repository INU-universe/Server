#name: Java CI with Gradle
## event trigger
## main이나 develop 브랜치에 push가 되었을 때 실행
## 동작 조건 설정 : main 브랜치에 push 혹은 pull request가 발생할 경우 동작한다.
#on:
#  push:
#    branches: [ "main", "dev" ]
#
#permissions:
#  contents: read
#
#jobs:
#  # Spring Boot 애플리케이션을 빌드하여 도커허브에 푸시하는 과정
#  build-docker-image:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3
#      # 1. Java 17 세팅
#      - name: Set up JDK 17
#        uses: actions/setup-java@v3
#        with:
#          java-version: '17'
#          distribution: 'temurin'
#
#      # 2. Spring Boot 애플리케이션 빌드
#      - name: Build with Gradle
#        uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
#        with:
#          arguments: clean bootJar
#
#      # 3. Docker 이미지 빌드
#      - name: docker image build
#        #        run: docker build —platform linux/amd64 -t mungzogi/mung .
#        run: docker build -t mungzogi/mung .
#      # 4. DockerHub 로그인
#      - name: docker login
#        uses: docker/login-action@v2
#        with:
#          username: mungzogi
#          password: hhs2684021@
#
#      # 5. Docker Hub 이미지 푸시
#      - name: docker Hub push
#        run: docker push mungzogi/mung
#
#  # 위 과정에서 푸시한 이미지를 ec2에서 풀받아서 실행시키는 과정

name: CI/CD

on:
  push:
    branches: [ "main", "dev" ]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:

      - name: checkout
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

        ## create application-database.yml
      - name: make application.yml
        run: |
          cd ./src/main/resources
          
          # application.yml 파일 생성
          mkdir -p ./src/main/resources
          
          touch ./application.yml
          
          # GitHub-Actions 에서 설정한 값을 application-database.yml 파일에 쓰기
          echo "${{ secrets.APPLICATION }}" >> ./application.yml
        shell: bash

#      - name: make application-redis.yml
#        run: |
#          cd ./src/main/resources
#
#          # application-redis.yml 파일 생성
#          touch ./application-redis.yml
#
#          # GitHub-Actions 에서 설정한 값을 application-redis.yml 파일에 쓰기
#          echo "${{ secrets.REDIS }}" >> ./application-redis.yml
#        shell: bash


      - name: Build with Gradle
        run: |
          chmod +x gradlew 
          ./gradlew build

      #          ./gradlew bootJar
      ## 웹 이미지 빌드 및 도커허브에 push
      - name: web docker build and push
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }} . 
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}
      ## docker compose up
      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: ${{ secrets.KEY }}
          script: |
            sudo docker rm $(sudo docker ps -a)
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPO }}
            cd ~
            docker-compose up -d
            sudo docker image prune -f